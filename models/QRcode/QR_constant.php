<?php

namespace models\QRcode;

class QR_constant
{
    Const cntVerQR = 40; // Количество версий
    Const QR_F = 21;
    Const QR_delta = 4;

    Const pixel_size = 3;
    Const border_size = 4;
    Const BorderOtstup = self::pixel_size * self::border_size;

    Const cSeparatorStr = ",";
    Const cModul_1 = "1011101";
    Const cModul_0 = "0000";
    Const cBalast0 = "11101100"; // Заполненяющая бинарная строка 1 варианта для выравнивания до необходимого размера
    Const cBalast1 = "00010001"; // Заполненяющая бинарная строка 2 варианта для выравнивания до необходимого размера
    Const cStrLDS = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ $%*+-./:"; //Кодирование/декодирование для алфавитно-цифрового режима
    Const cNullOfLDS = 39; // "*" в алфавитно-цифровом режиме

    // уровень защиты QR кода
    Const LevelKorr = Array("L", "M", "Q", "H");

    Const QR_INF_VER =Array(
        1=>Array(
            1=>false,false,false,false,false,false,
            7=>true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true),
        2=>Array(
            7 => '7C94','85BC','9A99','A4D3','BBF6','C762','D847','E60D','F928','10B78','1145D','12A17','13532','149A6',
            '15683','168C9','177EC','18EC4','191E1','1AFAB','1B08E','1CC1A','1D33F','1ED75','1F250','209D5','216F0','228BA',
            '2379F','24B0B','2542E','26A64','27541','28C69'));
    Const LenGALUA = 256;

    // Таблица многочлена коррекции
    Const ArrGenMnKorr =Array(
        7 => Array(1 => 87, 229, 146, 149, 238, 102, 21),
        10 => Array(1 => 251, 67, 46, 61, 118, 70, 64, 94, 32, 45),
        13 => Array(1 => 74, 152, 176, 100, 86, 100, 106, 104, 130, 218, 206, 140, 78),
        15 => Array(1 => 8, 183, 61, 91, 202, 37, 51, 58, 58, 237, 140, 124, 5, 99, 105),
        16 => Array(1 => 120, 104, 107, 109, 102, 161, 76, 3, 91, 191, 147, 169, 182, 194, 225, 120),
        17 => Array(1 => 43, 139, 206, 78, 43, 239, 123, 206, 214, 147, 24, 99, 150, 39, 243, 163, 136),
        18 => Array(1 => 215, 234, 158, 94, 184, 97, 118, 170, 79, 187, 152, 148, 252, 179, 5, 98, 96, 153),
        20 => Array(1 => 17, 60, 79, 50, 61, 163, 26, 187, 202, 180, 221, 225, 83, 239, 156, 164, 212, 212, 188, 190),
        22 => Array(1 => 210, 171, 247, 242, 93, 230, 14, 109, 221, 53, 200, 74, 8, 172, 98, 80, 219, 134, 160, 105, 165, 231),
        24 => Array(1 => 229, 121, 135, 48, 211, 117, 251, 126, 159, 180, 169, 152, 192, 226, 228, 218, 111, 0, 117, 232, 87, 96, 227, 21),
        26 => Array(1 => 173, 125, 158, 2, 103, 182, 118, 17, 145, 201, 111, 28, 165, 53, 161, 21, 245, 142, 13, 102, 48, 227, 153, 145, 218, 70),
        28 => Array(1 => 168, 223, 200, 104, 224, 234, 108, 180, 110, 190, 195, 147, 205, 27, 232, 201, 21, 43, 245, 87, 42, 195, 212, 119, 242, 37, 9, 123),
        30 => Array(1 => 41, 173, 145, 152, 216, 31, 179, 182, 50, 48, 110, 86, 239, 96, 222, 125, 42, 173, 226, 193, 224, 130, 156, 37, 251, 216, 238, 40, 192, 180));

    // Таблица Галуа
    Const Arr_Galua = Array(0 =>
        1, 2, 4, 8, 16, 32, 64, 128, 29, 58, 116, 232, 205, 135, 19, 38, 76, 152, 45, 90, 180, 117, 234, 201, 143, 3, 6, 12, 24, 48, 96, 192, 157,
        39, 78, 156, 37, 74, 148, 53, 106, 212, 181, 119, 238, 193, 159, 35, 70, 140, 5, 10, 20, 40, 80, 160, 93, 186, 105, 210, 185, 111, 222, 161,
        95, 190, 97, 194, 153, 47, 94, 188, 101, 202, 137, 15, 30, 60, 120, 240, 253, 231, 211, 187, 107, 214, 177, 127, 254, 225, 223, 163, 91, 182,
        113, 226, 217, 175, 67, 134, 17, 34, 68, 136, 13, 26, 52, 104, 208, 189, 103, 206, 129, 31, 62, 124, 248, 237, 199, 147, 59, 118, 236, 197, 151,
        51, 102, 204, 133, 23, 46, 92, 184, 109, 218, 169, 79, 158, 33, 66, 132, 21, 42, 84, 168, 77, 154, 41, 82, 164, 85, 170, 73, 146, 57, 114, 228,
        213, 183, 115, 230, 209, 191, 99, 198, 145, 63, 126, 252, 229, 215, 179, 123, 246, 241, 255, 227, 219, 171, 75, 150, 49, 98, 196, 149, 55, 110,
        220, 165, 87, 174, 65, 130, 25, 50, 100, 200, 141, 7, 14, 28, 56, 112, 224, 221, 167, 83, 166, 81, 162, 89, 178, 121, 242, 249, 239, 195, 155, 43, 86,
        172, 69, 138, 9, 18, 36, 72, 144, 61, 122, 244, 245, 247, 243, 251, 235, 203, 139, 11, 22, 44, 88, 176, 125, 250, 233, 207, 131, 27, 54, 108, 216, 173, 71, 142, 1);
    
    // Таблица 2. Максимальное количество информации.
    Const ArrMaxCntInf = Array(
        1 => Array(1 => 152, 272, 440, 640, 864, 1088, 1248, 1552, 1856, 2192, 2592, 2960, 3424, 3688, 4184, 4712, 5176, 5768, 6360, 6888, 7456, 8048, 8752, 9392, 10208, 10960, 11744, 12248, 13048, 13880, 14744, 15640, 16568, 17528, 18448, 19472, 20528, 21616, 22496, 23648),
        2 => Array(1 => 128, 224, 352, 512, 688, 864, 992, 1232, 1456, 1728, 2032, 2320, 2672, 2920, 3320, 3624, 4056, 4504, 5016, 5352, 5712, 6256, 6880, 7312, 8000, 8496, 9024, 9544, 10136, 10984, 11640, 12328, 13048, 13800, 14496, 15312, 15936, 16816, 17728, 18672),
        3 => Array(1 => 104, 176, 272, 384, 496, 608, 704, 880, 1056, 1232, 1440, 1648, 1952, 2088, 2360, 2600, 2936, 3176, 3560, 3880, 4096, 4544, 4912, 5312, 5744, 6032, 6464, 6968, 7288, 7880, 8264, 8920, 9368, 9848, 10288, 10832, 11408, 12016, 12656, 13328),
        4 => Array(1 => 72, 128, 208, 288, 368, 480, 528, 688, 800, 976, 1120, 1264, 1440, 1576, 1784, 2024, 2264, 2504, 2728, 3080, 3248, 3536, 3712, 4112, 4304, 4768, 5024, 5288, 5608, 5960, 6344, 6760, 7208, 7688, 7888, 8432, 8768, 9136, 9776, 10208))
    ;

    // Таблица 4. Количество блоков.
    Const ArrBlocks= Array(
        1 => Array(1 => 1, 1, 1, 1, 1, 2, 2, 2, 2, 4, 4, 4, 4, 4, 6, 6, 6, 6, 7, 8, 8, 9, 9, 10, 12, 12, 12, 13, 14, 15, 16, 17, 18, 19, 19, 20, 21, 22, 24, 25),
        2 => Array(1 => 1, 1, 1, 2, 2, 4, 4, 4, 5, 5, 5, 8, 9, 9, 10, 10, 11, 13, 14, 16, 17, 17, 18, 20, 21, 23, 25, 26, 28, 29, 31, 33, 35, 37, 38, 40, 43, 45, 47, 49),
        3 => Array(1 => 1, 1, 2, 2, 4, 4, 6, 6, 8, 8, 8, 10, 12, 16, 12, 17, 16, 18, 21, 20, 23, 23, 25, 27, 29, 34, 34, 35, 38, 40, 43, 45, 48, 51, 53, 56, 59, 62, 65, 68),
        4 => Array(1 => 1, 1, 2, 4, 4, 4, 5, 6, 8, 8, 11, 11, 16, 16, 18, 16, 19, 21, 25, 25, 25, 34, 30, 32, 35, 37, 40, 42, 45, 48, 51, 54, 57, 60, 63, 66, 70, 74, 77, 81)
    );

    // Таблица 5. Количество байтов коррекции на один блок.
    Const ArrByteInBlock= Array(
        1 => Array(1 => 7, 10, 15, 20, 26, 18, 20, 24, 30, 18, 20, 24, 26, 30, 22, 24, 28, 30, 28, 28, 28, 28, 30, 30, 26, 28, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30),
        2 => Array(1 => 10, 16, 26, 18, 24, 16, 18, 22, 22, 26, 30, 22, 22, 24, 24, 28, 28, 26, 26, 26, 26, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28),
        3 => Array(1 => 13, 22, 18, 26, 18, 24, 18, 22, 20, 24, 28, 26, 24, 20, 30, 24, 28, 28, 26, 30, 28, 30, 30, 30, 30, 28, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30),
        4 => Array(1 => 17, 28, 22, 16, 22, 28, 26, 26, 24, 28, 24, 28, 22, 24, 24, 30, 28, 28, 26, 28, 30, 24, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30)
    );
    // Таблица 5. Коды масок.    
    Const ArrKodMask = Array(
        1=>Array(1 => 
            4599, // L,0,111011111000100
            26535, // L,1,111001011110011
            10975, // L,2,111110110101010
            23695, // L,3,111100010011101
            31283, // L,4,110011000101111
            3171, // L,5,110001100011000
            16667, // L,6,110110001000001
            14155), // L,7,110100101110110
        2 =>Array( 1=> 
            9237,// M,0,101010000010010
            21061, // M,1,101000100100101
            7997, // M,2,101111001111100
            26989, // M,3,101101101001011
            20433, // M,4,100010111111001
            14721, // M,5,100000011001110
            29945, // M,6,100111110010111
            681),  // M,7,100101010100000
        3 =>Array(1 => 
            32086, // Q,0,011010101011111
            2822, // Q,1,011000001101000
            18046, // Q,2,011111100110001
            12334, // Q,3,011101000000110
            5778, // Q,4,010010010110100
            24770, // Q,5,010000110000011
            11706, // Q,6,010111011011010
            23530), // Q,7,010101111101101
        4 =>Array( 1 => 
            18612, // H,0,001011010001001
            16100, // H,1,001001110111110
            29596, // H,2,001110011100111
            1484, // H,3,001100111010000
            9072, // H,4,000011101100010
            21792, // H,5,000001001010101
            6232, // H,6,000110100001100
            28168) // H,7,000100000111011
        );


    protected $Arr_InvGalua=Array();
    protected $ArrMaketVer=Array(Array());
    protected $ArrCntDataLen=Array();

    public function GetQRTable()
    {
        For ($i = 1;$i <= self::cntVerQR; $i++) {
            $this->ArrMaketVer[$i][1] = self::QR_F + ($i - 1) * self::QR_delta;
            $this->ArrMaketVer[$i][2] = true; // Присутствие выравнивающих шаблонов
            $this->ArrMaketVer[$i][3] = Array();
            $this->ArrMaketVer[$i][4] = self::QR_INF_VER[1][$i]; // Код версии
            $this->ArrMaketVer[$i][5] = ($this->ArrMaketVer[$i][4] === true) ? self::HexToBin(self::QR_INF_VER[2][$i], 18) : "";// Значение кода версии
        }
        $this->ArrMaketVer[1][2] = False;
        // Координаты выравнивающих шаблонов
        $this->ArrMaketVer[2][3] = Array( 1 => 18);
        $this->ArrMaketVer[3][3] = Array( 1 => 22);
        $this->ArrMaketVer[4][3] = Array( 1 => 26);
        $this->ArrMaketVer[5][3] = Array( 1 => 30);
        $this->ArrMaketVer[6][3] = Array( 1 => 34);
        $this->ArrMaketVer[7][3] = Array( 1 => 6, 22, 38);
        $this->ArrMaketVer[8][3] = Array( 1 => 6, 24, 42);
        $this->ArrMaketVer[9][3] = Array( 1 => 6, 26, 46);
        $this->ArrMaketVer[10][3] = Array( 1 => 6, 28, 50);
        $this->ArrMaketVer[11][3] = Array( 1 => 6, 30, 54);
        $this->ArrMaketVer[12][3] = Array( 1 => 6, 32, 58);
        $this->ArrMaketVer[13][3] = Array( 1 => 6, 34, 62);
        $this->ArrMaketVer[14][3] = Array( 1 => 6, 26, 46, 66);
        $this->ArrMaketVer[15][3] = Array( 1 => 6, 26, 48, 70);
        $this->ArrMaketVer[16][3] = Array( 1 => 6, 26, 50, 74);
        $this->ArrMaketVer[17][3] = Array( 1 => 6, 30, 54, 78);
        $this->ArrMaketVer[18][3] = Array( 1 => 6, 30, 56, 82);
        $this->ArrMaketVer[19][3] = Array( 1 => 6, 30, 58, 86);
        $this->ArrMaketVer[20][3] = Array( 1 => 6, 34, 62, 90);
        $this->ArrMaketVer[21][3] = Array( 1 => 6, 28, 50, 72, 94);
        $this->ArrMaketVer[22][3] = Array( 1 => 6, 26, 50, 74, 98);
        $this->ArrMaketVer[23][3] = Array( 1 => 6, 30, 54, 78, 102);
        $this->ArrMaketVer[24][3] = Array( 1 => 6, 28, 54, 80, 106);
        $this->ArrMaketVer[25][3] = Array( 1 => 6, 32, 58, 84, 110);
        $this->ArrMaketVer[26][3] = Array( 1 => 6, 30, 58, 86, 114);
        $this->ArrMaketVer[27][3] = Array( 1 => 6, 34, 62, 90, 118);
        $this->ArrMaketVer[28][3] = Array( 1 => 6, 26, 50, 74, 98, 122);
        $this->ArrMaketVer[29][3] = Array( 1 => 6, 30, 54, 78, 102, 126);
        $this->ArrMaketVer[30][3] = Array( 1 => 6, 26, 52, 78, 104, 130);
        $this->ArrMaketVer[31][3] = Array( 1 => 6, 30, 56, 82, 108, 134);
        $this->ArrMaketVer[32][3] = Array( 1 => 6, 34, 60, 86, 112, 138);
        $this->ArrMaketVer[33][3] = Array( 1 => 6, 30, 58, 86, 114, 142);
        $this->ArrMaketVer[34][3] = Array( 1 => 6, 34, 62, 90, 118, 146);
        $this->ArrMaketVer[35][3] = Array( 1 => 6, 30, 54, 78, 102, 126, 150);
        $this->ArrMaketVer[36][3] = Array( 1 => 6, 24, 50, 76, 102, 128, 154);
        $this->ArrMaketVer[37][3] = Array( 1 => 6, 28, 54, 80, 106, 132, 158);
        $this->ArrMaketVer[38][3] = Array( 1 => 6, 32, 58, 84, 110, 136, 162);
        $this->ArrMaketVer[39][3] = Array( 1 => 6, 26, 54, 82, 110, 138, 166);
        $this->ArrMaketVer[40][3] = Array( 1 => 6, 30, 58, 86, 114, 142, 170);

        //    Таблица 3. Длина поля количества данных.
        //    Версия 1–9    Версия 10–26    Версия 27–40
        For ($i = 0; $i <= self::cntVerQR; $i++) {
            if ($i <= 10) {
                $this->ArrCntDataLen[$i][1] = 10; // Цифровое поле
                $this->ArrCntDataLen[$i][2] = 9; // Буквенно-цифровое поле
                $this->ArrCntDataLen[$i][3] = 8; // Побайтовое поле
                $this->ArrCntDataLen[$i][4] = 8; // Кандзи
            } elseif ($i > 10 and $i <= 26) {
                $this->ArrCntDataLen[$i][1] = 12; // Цифровое поле
                $this->ArrCntDataLen[$i][2] = 11; // Буквенно-цифровое поле
                $this->ArrCntDataLen[$i][3] = 16; // Побайтовое поле
                $this->ArrCntDataLen[$i][4] = 10; // Кандзи
            } else {
                $this->ArrCntDataLen[$i][1] = 14; // Цифровое поле
                $this->ArrCntDataLen[$i][2] = 13; // Буквенно-цифровое поле
                $this->ArrCntDataLen[$i][3] = 16; // Побайтовое поле
                $this->ArrCntDataLen[$i][4] = 12; // Кандзи
            }
        }
        For ($i = 0; $i < self::LenGALUA; $i++) { $this->Arr_InvGalua[self::Arr_Galua[$i]] = $i; }
    }

    //============================================\\
    //         ФУНКЦИИ ОБРАБОТКИ ДАННЫХ           \\
    //============================================\\
    // побитовое четение числа с преобразованием в бинарный ряд
    public function BitRead($nVal, $nLen){
        $sVal = "";
        for ($i = 0; $i < $nLen; $i++) {
            $sVal = (string)(($nVal & 1) ? "1" : "0") . $sVal;
            $nVal = $nVal >> 1;
        }
        return $sVal;
    }

    // преобразование шеснатиричного выражения в бинарный ряд определенной длины
    public function HexToBin($hexVal, $nLen)
    {
        return str_pad(base_convert($hexVal, 16, 2), $nLen, "0", STR_PAD_LEFT);
    }

    // Преобразование строки цифрового поля в бинарный ряд
    public function p_sNumToBin($strNum)
    {
        $cntNum = strlen($strNum);
        $cnt3 = intdiv($cntNum, 3);
        $cntOst = ($cntNum % 3);
        $sVal = "";
        for ($j = 0; $j <= $cnt3 - 1; $j++) {
            $nVal = (integer)(SUBSTR($strNum, $j * 3, 3));
            $sVal_Cadr = self::BitRead($nVal, 10);
            $sVal .= $sVal_Cadr;
        }
        if ($cntOst == 2) {
            $nVal = (integer)(substr($strNum, -2));
            $sVal_Cadr = self::BitRead($nVal, 7);
            $sVal .= $sVal_Cadr;
        } elseif ($cntOst == 1) {
            $nVal = (integer)(substr($strNum, -1));
            $sVal_Cadr = self::BitRead($nVal, 4);
            $sVal .= $sVal_Cadr;
        }
         return $sVal;
    }

    // Преобразование строки буквенно-цифровое поля в бинарный ряд
    public function p_sLN_ToBin($strLitNum)
    {
        $strLitNum = strtoupper($strLitNum);
        $cntSign = strlen($strLitNum);
        $sVal = "";
        $kn = intdiv($cntSign, 2);
        for ($i = 0; $i < $kn; $i++) {
            $nVal = (self::p_ASC_LN(SUBSTR($strLitNum, $i * 2, 1)) * 45 +
                self::p_ASC_LN(SUBSTR($strLitNum, $i * 2 + 1, 1)));
            $sVal .=  self::BitRead($nVal, 11);
        }
        IF (($cntSign % 2) === 1) {
            $nVal = self::p_ASC_LN(substr($strLitNum, -1));
            $sVal .= self::BitRead($nVal, 6);
        }
        return $sVal;
    }

    // Преобразование строки байтового поля в бинарный ряд
    public function p_sByte_ToBin($Stroka)
    {
        $cntSign = strlen($Stroka);
        $sVal = "";
        for ($i = 0; $i < $cntSign; $i++) {
            $nVal = ord(substr($Stroka, $i, 1));
            $sVal_Cadr = self::BitRead($nVal, 8);
            $sVal .= $sVal_Cadr;
        }
        return $sVal;
    }

    //Возвращает номер символа буквенно-цифрового кодирования
    public function p_ASC_LN($cSimvol)
    {
        $nVal = stripos(self::cStrLDS, $cSimvol);
        if ($nVal < 0) $nVal = self::cNullOfLDS;
        return $nVal;
    }

    //Возвращает строку из 2-х мерного массива данных
    public function print_Arr_of_num1($Arr, $len_i, $len_j)
    {
        $STR_ = "";
        $cRazd = "";
        for ($j = 1; $j <= $len_j; $j++) {
            for ($i = 1; $i <= $len_i; $i++) {
                IF (is_null($Arr[$i][$j]) === false) {
                    $STR_ .= $cRazd . (string)$Arr[$i][$j];
                    $cRazd = self::cSeparatorStr;
                }
            }
        }
        return $STR_;
    }

    // Инвентирует бинарную строку в числовой ряд с разделением запятой
    public function p_BytesToNumStr($cBins){
        $cntByte = strlen($cBins) / 8;
        $STR_ = "";
        $cRazd = "";
        for ($i = 0; $i < $cntByte; $i++) {
            $STR_ .= $cRazd . (string)(bindec(SUBSTR($cBins, $i * 8 , 8)));
            $cRazd = self::cSeparatorStr;
        }
        return $STR_;
    }
}




